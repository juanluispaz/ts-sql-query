import type { AnyTableOrView } from "./ITableOrView"
import type { ToSql } from "../sqlBuilders/SqlBuilder"
import type { AnyValueSource, __ValueSourcePrivate } from "../expressions/values"
import type { autogeneratedPrimaryKeyValue, hasDefaultValue, primaryKeyValue, type, writable } from "./symbols"
import { isColumnObject } from "./symbols"

// Represents any column in the database
export interface DBColumn extends AnyValueSource {
    [type]: 'column'
}

export interface WritableDBColumn extends DBColumn {
    [writable]: true
}

export interface WritableDBPrimaryKeyColumn extends WritableDBColumn {
    [primaryKeyValue]: true
}

export interface WritableDBColumnWithDefaultValue extends WritableDBColumn {
    [hasDefaultValue]: true
}

export interface WritableDBColumnWithoutDefaultValue extends WritableDBColumn {
    [hasDefaultValue]: false
}

export interface WritableDBPrimaryKeyColumnWithDefaultValue extends WritableDBColumnWithDefaultValue, WritableDBPrimaryKeyColumn {
    [primaryKeyValue]: true
    [autogeneratedPrimaryKeyValue]: true
}

export interface WritableDBPrimaryKeyColumnWithoutDefaultValue extends WritableDBColumnWithoutDefaultValue, WritableDBPrimaryKeyColumn {
    [primaryKeyValue]: true
    [autogeneratedPrimaryKeyValue]: true
}

export interface Column extends WritableDBColumnWithoutDefaultValue {
}

export interface ColumnWithDefaultValue extends WritableDBColumnWithDefaultValue {
}

export interface PrimaryKeyColumn extends WritableDBPrimaryKeyColumnWithoutDefaultValue {
    [primaryKeyValue]: true
}

export interface PrimaryKeyAutogeneratedColumn extends WritableDBPrimaryKeyColumnWithDefaultValue {
    [primaryKeyValue]: true
    [autogeneratedPrimaryKeyValue]: true
}

export interface __ColumnPrivate extends __ValueSourcePrivate {
    [isColumnObject]: true
    __name: string
    __tableOrView: AnyTableOrView
    __hasDefault: boolean
    __isPrimaryKey: boolean
    __isAutogeneratedPrimaryKey: boolean
    __isComputed: boolean
    __sequenceName?: string
    __writable: boolean
}

export function isColumn(value: any): value is DBColumn {
    if (value === undefined || value === null) {
        return false
    }
    if (typeof value === 'object') {
        return !!value[isColumnObject]
    }
    return false
}

export function __getColumnPrivate(column: DBColumn): __ColumnPrivate {
    return column as any
}

export function __getColumnOfObject(obj: AnyTableOrView | { [property: string] : DBColumn}, column: string): (DBColumn & ToSql) | undefined {
    const result = (obj as any)[column]
    if (!result) {
        return undefined
    }
    if (typeof result !== 'object') {
        return undefined
    }
    if (result[isColumnObject]) {
        return result as any
    } else {
        return undefined
    }
}