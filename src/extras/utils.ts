import { isValueSource, __getValueSourcePrivate } from "../expressions/values"
import { isColumn, __getColumnPrivate } from "../utils/Column"
import { __getTableOrViewPrivate } from "../utils/ITableOrView"
import type { AutogeneratedIdColumnKeys, ColumnKeys, IdColumnKeys, ProvidedIdColumnKeys, WritableColumnKeys } from "./types"

export function extractColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<ColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isValueSource(value)) {
            result[key] = value
        }
    }
    return result
}

export function extractWritableColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<WritableColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && tablePrivate.__type === 'table') {
                result[key] = value
            }
        }
    }
    return result
}

export function extractIdColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<IdColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && columnPrivate.__isPrimaryKey && tablePrivate.__type === 'table') {
                result[key] = value
            }
        }
    }
    return result
}

export function extractAutogeneratedIdColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<AutogeneratedIdColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && columnPrivate.__isAutogeneratedPrimaryKey && tablePrivate.__type === 'table') {
                result[key] = value
            }
        }
    }
    return result
}

export function extractProvidedIdColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<ProvidedIdColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && columnPrivate.__isPrimaryKey && !columnPrivate.__isAutogeneratedPrimaryKey && tablePrivate.__type === 'table') {
                result[key] = value
            }
        }
    }
    return result
}

export function extractColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<ColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isValueSource(value)) {
            result.push(key)
        }
    }
    return result
}

export function extractWritableColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<WritableColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && tablePrivate.__type === 'table') {
                result.push(key)
            }
        }
    }
    return result
}

export function extractIdColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<IdColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && columnPrivate.__isPrimaryKey && tablePrivate.__type === 'table') {
                result.push(key)
            }
        }
    }
    return result
}

export function extractAutogeneratedIdColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<AutogeneratedIdColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && columnPrivate.__isAutogeneratedPrimaryKey && tablePrivate.__type === 'table') {
                result.push(key)
            }
        }
    }
    return result
}

export function extractProvidedIdColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<AutogeneratedIdColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && columnPrivate.__isPrimaryKey && !columnPrivate.__isAutogeneratedPrimaryKey && tablePrivate.__type === 'table') {
                result.push(key)
            }
        }
    }
    return result
}

export function extractWritableShapeFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<WritableColumnKeys<O>, EXCLUDE>]: K } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            const tablePrivate = __getTableOrViewPrivate(columnPrivate.__tableOrView)
            if (columnPrivate.__writable && tablePrivate.__type === 'table') {
                result[key] = key
            }
        }
    }
    return result
}
