import type { ITableOrView } from "../utils/ITableOrView"
import { IfValueSource, BooleanValueSource, IAnyBooleanValueSource, IStringIntValueSource, StringIntValueSource, IStringNumberValueSource, StringNumberValueSource, IIntValueSource, IntValueSource, INumberValueSource, NumberValueSource, ITypeSafeBigintValueSource, TypeSafeBigintValueSource, IBigintValueSource, BigintValueSource, IStringDoubleValueSource, StringDoubleValueSource, IDoubleValueSource, DoubleValueSource, ITypeSafeStringValueSource, TypeSafeStringValueSource, IStringValueSource, StringValueSource, ILocalDateValueSource, LocalDateValueSource, IDateValueSource, DateValueSource, ILocalTimeValueSource, LocalTimeValueSource, ITimeValueSource, TimeValueSource, ILocalDateTimeValueSource, LocalDateTimeValueSource, IDateTimeValueSource, DateTimeValueSource, IEqualableValueSource, EqualableValueSource, IComparableValueSource, ComparableValueSource, IValueSource, isValueSource, __getValueSourcePrivate, AnyValueSource, MergeOptionalUnion, ICustomIntValueSource, ICustomDoubleValueSource, ICustomUuidValueSource, ICustomLocalDateValueSource, ICustomLocalTimeValueSource, ICustomLocalDateTimeValueSource } from "../expressions/values"
import type { ifValueSourceType, optionalType, tableOrView, valueSourceTypeName, valueType } from "../utils/symbols"
import { isColumn, __getColumnPrivate } from "../utils/Column"
import type { AutogeneratedIdColumnKeys, ColumnKeys, IdColumnKeys, ProvidedIdColumnKeys, WritableColumnKeys } from "./types"

type OnlyStringKey<KEY> = KEY extends string ? KEY : never

/** @deprecated Use complex projections or aggregate as an object array instead */
export function prefixCapitalized<O extends object, PREFIX extends string>(obj: O, prefix: PREFIX): { [K in OnlyStringKey<keyof O> as `${PREFIX}${Capitalize<K>}`]: O[K] } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        result[prefix + key.substr(0, 1).toUpperCase() + key.substr(1)] = obj[key]
    }
    return result
}

/** @deprecated Use complex projections or aggregate as an object array instead */
export function prefixMapForSplitCapitalized<O extends object, PREFIX extends string>(obj: O, prefix: PREFIX): { [K in OnlyStringKey<keyof O> as K]: `${PREFIX}${Capitalize<K>}` } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        result[key] = prefix + key.substr(0, 1).toUpperCase() + key.substr(1)
    }
    return result
}

type CapitalizedGuided<PREFIX extends string, KEY extends string, REFERENCE extends object> = KEY extends keyof REFERENCE
    ? (
        REFERENCE[KEY] extends IValueSource<any, any, any, infer OPTIONAL_TYPE>
        ? (
            OPTIONAL_TYPE extends 'required'
            ? `${PREFIX}${Capitalize<KEY>}!`
            : `${PREFIX}${Capitalize<KEY>}`
        ) : `${PREFIX}${Capitalize<KEY>}`
    ) : `${PREFIX}${Capitalize<KEY>}`

/** @deprecated Use complex projections or aggregate as an object array instead */
export function prefixMapForGuidedSplitCapitalized<O extends object, R extends ITableOrView<any> | { [KEY in keyof O]?: AnyValueSource }, PREFIX extends string>(obj: O, reference: R, prefix: PREFIX): { [K in OnlyStringKey<keyof O> as K]: CapitalizedGuided<PREFIX, K, R> } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        const r = (reference as any)[key]
        if (isValueSource(r) && __getValueSourcePrivate(r).__optionalType === 'required') {
            result[key] = prefix + key.substr(0, 1).toUpperCase() + key.substr(1) + '!'
        } else {
            result[key] = prefix + key.substr(0, 1).toUpperCase() + key.substr(1)
        }
    }
    return result
}

type NameGuided<KEY extends string, REFERENCE extends object> = KEY extends keyof REFERENCE
    ? (
        REFERENCE[KEY] extends IValueSource<any, any, any, infer OPTIONAL_TYPE>
        ? (
            OPTIONAL_TYPE extends 'required'
            ? `${KEY}!`
            : KEY
        ) : KEY
    ) : KEY

/** @deprecated Use complex projections or aggregate as an object array instead */
export function mapForGuidedSplit<O extends object, R extends ITableOrView<any> | { [KEY in keyof O]?: AnyValueSource } >(obj: O, reference: R): { [K in OnlyStringKey<keyof O> as K]: NameGuided<K, R> } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        const r = (reference as any)[key]
        if (isValueSource(r) && __getValueSourcePrivate(r).__optionalType === 'required') {
            result[key] = key + '!'
        } else {
            result[key] = key
        }
    }
    return result
}

/** @deprecated Use complex projections or aggregate as an object array instead */
export function prefixDotted<O extends object, PREFIX extends string>(obj: O, prefix: PREFIX): { [K in OnlyStringKey<keyof O> as `${PREFIX}.${K}`]-?: O[K] } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        result[prefix + '.' + key] = obj[key]
    }
    return result
}

/** @deprecated Use complex projections or aggregate as an object array instead */
export function prefixMapForSplitDotted<O extends object, PREFIX extends string>(obj: O, prefix: PREFIX): { [K in OnlyStringKey<keyof O> as K]-?: `${PREFIX}.${K}` } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        result[key] = prefix + '.' + key
    }
    return result
}

type DottedGuided<PREFIX extends string, KEY extends string, REFERENCE extends object> = KEY extends keyof REFERENCE
    ? (
        REFERENCE[KEY] extends IValueSource<any, any, any, infer OPTIONAL_TYPE>
        ? (
            OPTIONAL_TYPE extends 'required'
            ? `${PREFIX}.${KEY}!`
            : `${PREFIX}.${KEY}`
        ) : `${PREFIX}.${KEY}`
    ) : `${PREFIX}.${KEY}`

/** @deprecated Use complex projections or aggregate as an object array instead */
export function prefixMapForGuidedSplitDotted<O extends object, R extends ITableOrView<any> | { [KEY in keyof O]?: AnyValueSource }, PREFIX extends string>(obj: O, reference: R, prefix: PREFIX): { [K in OnlyStringKey<keyof O> as K]: DottedGuided<PREFIX, K, R> } {
    if (!obj) {
        return obj
    }
    const result: any = {}
    for (let key in obj) {
        const r = (reference as any)[key]
        if (isValueSource(r) && __getValueSourcePrivate(r).__optionalType === 'required') {
            result[key] = prefix + '.' + key + '!'
        } else {
            result[key] = prefix + '.' + key
        }
    }
    return result
}

export function extractColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<ColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isValueSource(value)) {
            result[key] = value
        }
    }
    return result
}

export function extractWritableColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<WritableColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            if (!__getColumnPrivate(value).__isComputed) {
                result[key] = value
            }
        }
    }
    return result
}

export function extractIdColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<IdColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            if (columnPrivate.__isPrimaryKey) {
                result[key] = value
            }
        }
    }
    return result
}

export function extractAutogeneratedIdColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<AutogeneratedIdColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            if (columnPrivate.__isAutogeneratedPrimaryKey) {
                result[key] = value
            }
        }
    }
    return result
}

export function extractProvidedIdColumnsFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<ProvidedIdColumnKeys<O>, EXCLUDE>]: O[K] } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            if (columnPrivate.__isPrimaryKey && !columnPrivate.__isAutogeneratedPrimaryKey) {
                result[key] = value
            }
        }
    }
    return result
}

export function extractColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<ColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isValueSource(value)) {
            result.push(key)
        }
    }
    return result
}

export function extractWritableColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<WritableColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            if (!__getColumnPrivate(value).__isComputed) {
                result.push(key)
            }
        }
    }
    return result
}

export function extractIdColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<IdColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            if (columnPrivate.__isPrimaryKey) {
                result.push(key)
            }
        }
    }
    return result
}

export function extractAutogeneratedIdColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<AutogeneratedIdColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            if (columnPrivate.__isAutogeneratedPrimaryKey) {
                result.push(key)
            }
        }
    }
    return result
}

export function extractProvidedIdColumnNamesFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): Exclude<AutogeneratedIdColumnKeys<O>, EXCLUDE>[] {
    if (!obj) {
        return []
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }

    const result: any[] = []
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            const columnPrivate = __getColumnPrivate(value)
            if (columnPrivate.__isPrimaryKey && !columnPrivate.__isAutogeneratedPrimaryKey) {
                result.push(key)
            }
        }
    }
    return result
}

export function extractWritableShapeFrom<O extends object, EXCLUDE extends ColumnKeys<O> = never>(obj: O, exclude?: EXCLUDE[]): { [K in Exclude<WritableColumnKeys<O>, EXCLUDE>]: K } {
    if (!obj) {
        return obj
    }
    const ignore: any = {}
    if (exclude) {
        for (let i = 0, length = exclude.length; i < length; i++) {
            ignore[exclude[i]] = true
        }
    }
    
    const result: any = {}
    for (let key in obj) {
        if (key in ignore) {
            continue
        }
        const value = obj[key]
        if (isColumn(value)) {
            if (!__getColumnPrivate(value).__isComputed) {
                result[key] = key
            }
        }
    }
    return result
}

type HasIfValueSource<VALUE> = VALUE extends {[ifValueSourceType]: 'IfValueSource'} ? true : never

/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IAnyBooleanValueSource<any, any>>(value: VALUE): true extends HasIfValueSource<VALUE>? IfValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>> : BooleanValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IStringIntValueSource<any, any>>(value: VALUE): StringIntValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IStringNumberValueSource<any, any>>(value: VALUE): StringNumberValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IIntValueSource<any, any>>(value: VALUE): IntValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends INumberValueSource<any, any>>(value: VALUE): NumberValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ITypeSafeBigintValueSource<any, any>>(value: VALUE): TypeSafeBigintValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IBigintValueSource<any, any>>(value: VALUE): BigintValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IStringDoubleValueSource<any, any>>(value: VALUE): StringDoubleValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IStringNumberValueSource<any, any>>(value: VALUE): StringNumberValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IDoubleValueSource<any, any>>(value: VALUE): DoubleValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends INumberValueSource<any, any>>(value: VALUE): NumberValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ITypeSafeStringValueSource<any, any>>(value: VALUE): TypeSafeStringValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IStringValueSource<any, any>>(value: VALUE): StringValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ILocalDateValueSource<any, any>>(value: VALUE): LocalDateValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IDateValueSource<any, any>>(value: VALUE): DateValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ILocalTimeValueSource<any, any>>(value: VALUE): LocalTimeValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ITimeValueSource<any, any>>(value: VALUE): TimeValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ILocalDateTimeValueSource<any, any>>(value: VALUE): LocalDateTimeValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IDateTimeValueSource<any, any>>(value: VALUE): DateTimeValueSource<VALUE[typeof tableOrView], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ICustomIntValueSource<any, any, any, any>>(value: VALUE): ICustomIntValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ICustomDoubleValueSource<any, any, any, any>>(value: VALUE): ICustomDoubleValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ICustomUuidValueSource<any, any, any, any>>(value: VALUE): ICustomUuidValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ICustomLocalDateValueSource<any, any, any, any>>(value: VALUE): ICustomLocalDateValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ICustomLocalTimeValueSource<any, any, any, any>>(value: VALUE): ICustomLocalTimeValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends ICustomLocalDateTimeValueSource<any, any, any, any>>(value: VALUE): ICustomLocalDateTimeValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IEqualableValueSource<any, any, any, any>>(value: VALUE): EqualableValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType<VALUE extends IComparableValueSource<any, any, any, any>>(value: VALUE): ComparableValueSource<VALUE[typeof tableOrView], VALUE[typeof valueType], VALUE[typeof valueSourceTypeName], MergeOptionalUnion<VALUE[typeof optionalType]>>
/** @deprecated Use connection.dynamicBooleanExpressionUsing instead */
export function mergeType(value: any): any {
    return value
}
